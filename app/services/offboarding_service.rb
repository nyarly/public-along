class OffboardingService
  APPLICATIONS = ["Google Apps", "Office 365", "OTA", "CHARM EU", "CHARM JP", "CHARM NA", "ROMS"]

  def initialize(employees)
    processed_offboards = []

    employees.each do |employee|
      employee.active_security_profiles.each do |sp|
        sp.access_levels.each do |a|

          offboard_accounts = []
          application = Application.find(a.application_id)
          if APPLICATIONS.include? application.name
            offboard_accounts << application
          end

          processed_offboards << process(offboard_accounts, employee)
        end
      end
    end

    processed_offboards
  end

  private

  def process(accounts, employee)
    emp_transaction = emp_transaction(employee)
    puts "here is what you've got"
    puts emp_transaction
    accounts.each do |account|
      app_transaction = emp_transaction.app_transactions.build(
        application_id: account.id,
        emp_transaction_id: emp_transaction.id,
        status: "Pending"
      )

      if account.name == "Google Apps"
        # call google app service
        emp_transaction.save!
        app_transaction.save!
      elsif account.name == "Office 365"
        # call office 365 service
      elsif account.name.include? == "CHARM"
        # call charm service
      elsif account.name == "ROMS"
        # call ROMS service
      elsif account.name == "OTA"
        # call OTA service
      end
    end
  end

  def emp_transaction(employee)
    emp_transaction = employee.emp_transactions.where(kind: "Offboarding").last ||= employee.emp_transactions.build(
      kind: "Offboarding",
      user_id: User.first.id,
      notes: "Automatically generated by Mezzo"
    )

    puts emp_transaction.inspect

    sec_profiles = employee.active_security_profiles.map(&:id)
    sec_profiles.each do |sp_id|
      esp = EmpSecProfile.where("employee_id = ? AND security_profile_id = ? AND revoking_transaction_id IS NULL", employee.id, sp_id).first
      emp_transaction.emp_sec_profiles << esp
    end

    emp_transaction.save!
  end

end
