require 'rails_helper'

describe OffboardingService, type: :service do
  let!(:manager) { FactoryGirl.create(:employee) }
  let!(:employee) { FactoryGirl.create(:employee, manager_id: manager.id) }
  let!(:security_profile) { FactoryGirl.create(:security_profile) }
  let!(:application) { FactoryGirl.create(:application, name: "Google Apps") }
  let!(:access_level) { FactoryGirl.create(:access_level, application_id: application.id) }
  let!(:sec_prof_access_level) {
    FactoryGirl.create(:sec_prof_access_level,
       security_profile_id: security_profile.id,
       access_level_id: access_level.id)}
  let!(:emp_transaction) { FactoryGirl.create(:emp_transaction, kind: "Onboarding") }
  let!(:emp_sec_profile) {
    FactoryGirl.create(:emp_sec_profile,
      emp_transaction_id: emp_transaction.id,
      employee_id: employee.id,
      security_profile_id: security_profile.id)}

  context "without an offboarding emp transaction" do
    it "should successfully create an offboarding emp transaction" do
      expect{
        OffboardingService.new([employee])
      }.to change{employee.offboarding_infos.count}.from(0).to(1)
      expect(employee.offboarding_infos.last.emp_transaction.kind).to eq("Offboarding")
      expect(employee.offboarding_infos.last.emp_transaction.user_id).to eq(1)
      expect(employee.offboarding_infos.last.emp_transaction.notes).to eq("Automatically generated by Mezzo")
    end

    it "should create default offboarding info" do
      OffboardingService.new([employee])
      expect(employee.offboarding_infos.last.archive_data).to eq(nil)
      expect(employee.offboarding_infos.last.replacement_hired).to eq(nil)
      expect(employee.offboarding_infos.last.forward_email_id).to eq(manager.id)
      expect(employee.offboarding_infos.last.reassign_salesforce_id).to eq(manager.id)
      expect(employee.offboarding_infos.last.transfer_google_docs_id).to eq(manager.id)
    end

    it "should successfully create app transactions for offboarded accounts" do
      OffboardingService.new([employee])
      offboarding_info = employee.offboarding_infos.last
      emp_trans = offboarding_info.emp_transaction
      expect(emp_trans.app_transactions.count).to eq(1)
      expect(emp_trans.app_transactions[0].status).to eq("Pending")
      expect(emp_trans.app_transactions[0].application_id).to eq(application.id)
      expect(emp_trans.app_transactions[0].emp_transaction_id).to eq(emp_trans.id)
    end
  end

  context "with an offboarding emp transaction" do
    let!(:emp_transaction_2) {
      FactoryGirl.create(:emp_transaction,
        kind: "Offboarding",
        user_id: 1234,
        notes: "Moving on!")}
    let!(:offboarding_info) {
      FactoryGirl.create(:offboarding_info,
        employee_id: employee.id,
        archive_data: true,
        replacement_hired: true,
        forward_email_id: 1111,
        reassign_salesforce_id: 2222,
        emp_transaction_id: emp_transaction_2.id,
        transfer_google_docs_id: 3333)}

    it "should have an offboarding employee transaction" do
      OffboardingService.new([employee])
      expect(employee.offboarding_infos.last.emp_transaction.kind).to eq("Offboarding")
      expect(employee.offboarding_infos.last.emp_transaction.user_id).to eq(1234)
      expect(employee.offboarding_infos.last.emp_transaction.notes).to eq("Moving on!")
    end

    it "should use submitted offboarding info" do
      expect{
        OffboardingService.new([employee])
      }.not_to change{employee.offboarding_infos.count}
      expect(employee.offboarding_infos.last.archive_data).to eq(true)
      expect(employee.offboarding_infos.last.replacement_hired).to eq(true)
      expect(employee.offboarding_infos.last.forward_email_id).to eq(1111)
      expect(employee.offboarding_infos.last.reassign_salesforce_id).to eq(2222)
      expect(employee.offboarding_infos.last.transfer_google_docs_id).to eq(3333)
    end

    it "should successfully create app transactions for offboarded accounts" do
      OffboardingService.new([employee])
      offboarding_info = employee.offboarding_infos.last
      emp_trans = offboarding_info.emp_transaction
      expect(emp_trans.app_transactions.count).to eq(1)
      expect(emp_trans.app_transactions[0].status).to eq("Pending")
      expect(emp_trans.app_transactions[0].application_id).to eq(application.id)
      expect(emp_trans.app_transactions[0].emp_transaction_id).to eq(emp_trans.id)
    end
  end
end
