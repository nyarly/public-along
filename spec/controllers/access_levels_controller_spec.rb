require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe AccessLevelsController, type: :controller do

  let!(:access_level) { FactoryGirl.create(:access_level) }
  let!(:user) { FactoryGirl.create(:user, :role_name => "Admin") }

  let(:valid_attributes) {
    {
      name: "Access Level",
      application_id: 1
    }
  }

  let(:invalid_attributes) {
    {
      name: nil,
      application_id: 1
    }
  }

  before :each do
    login_as user
  end

  describe "GET #index" do
    it "assigns all access_levels as @access_levels" do
      should_authorize(:index, AccessLevel)
      get :index
      expect(assigns(:access_levels)).to eq([access_level])
    end
  end

  describe "GET #show" do
    it "assigns the requested access_level as @access_level" do
      should_authorize(:show, access_level)
      get :show, {:id => access_level.id}
      expect(assigns(:access_level)).to eq(access_level)
    end
  end

  describe "GET #new" do
    it "assigns a new access_level as @access_level" do
      should_authorize(:new, AccessLevel)
      get :new
      expect(assigns(:access_level)).to be_a_new(AccessLevel)
    end
  end

  describe "GET #edit" do
    it "assigns the requested access_level as @access_level" do
      should_authorize(:edit, access_level)
      get :edit, {:id => access_level.id}
      expect(assigns(:access_level)).to eq(access_level)
    end
  end

  describe "POST #create" do
    before :each do
      should_authorize(:create, AccessLevel)
    end

    context "with valid params" do
      it "creates a new AccessLevel" do
        expect {
          post :create, {:access_level => valid_attributes}
        }.to change(AccessLevel, :count).by(1)
      end

      it "assigns a newly created access_level as @access_level" do
        post :create, {:access_level => valid_attributes}
        expect(assigns(:access_level)).to be_a(AccessLevel)
        expect(assigns(:access_level)).to be_persisted
      end

      it "redirects to the created access_level" do
        post :create, {:access_level => valid_attributes}
        expect(response).to redirect_to(AccessLevel.find_by(:name => "Access Level"))
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved access_level as @access_level" do
        post :create, {:access_level => invalid_attributes}
        expect(assigns(:access_level)).to be_a_new(AccessLevel)
      end

      it "re-renders the 'new' template" do
        post :create, {:access_level => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    before :each do
      should_authorize(:update, access_level)
    end

    context "with valid params" do
      let(:new_attributes) {
        {
          name: "New Name",
          application_id: 1
        }
      }

      it "updates the requested access_level" do
        put :update, {:id => access_level.id, :access_level => new_attributes}
        access_level.reload
        expect(access_level.name).to eq("New Name")
      end

      it "assigns the requested access_level as @access_level" do
        put :update, {:id => access_level.id, :access_level => valid_attributes}
        expect(assigns(:access_level)).to eq(access_level)
      end

      it "redirects to the access_level" do
        put :update, {:id => access_level.id, :access_level => valid_attributes}
        expect(response).to redirect_to(access_level)
      end
    end

    context "with invalid params" do
      it "assigns the access_level as @access_level" do
        put :update, {:id => access_level.id, :access_level => invalid_attributes}
        expect(assigns(:access_level)).to eq(access_level)
      end

      it "re-renders the 'edit' template" do
        put :update, {:id => access_level.id, :access_level => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    before :each do
      should_authorize(:destroy, access_level)
    end

    it "destroys the requested access_level" do
      expect {
        delete :destroy, {:id => access_level.id}
      }.to change(AccessLevel, :count).by(-1)
    end

    it "redirects to the access_levels list" do
      delete :destroy, {:id => access_level.id}
      expect(response).to redirect_to(access_levels_url)
    end
  end

end
