require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe WorkerTypesController, type: :controller do

  let!(:worker_type) { FactoryGirl.create(:worker_type) }
  let!(:user) { FactoryGirl.create(:user, :role_names => ["Admin"]) }

  let(:valid_attributes) {
    {
      name: "OT Valid Name",
      kind: "Contingent",
      code: "OTVN",
      status: "Active"
    }
  }

  let(:invalid_attributes) {
    {
      name: "OT HQ",
      kind: "Office",
    }
  }

  before :each do
    login_as user
  end

  describe "GET #index" do
    it "assigns all worker_types as @worker_types" do
      should_authorize(:index, WorkerType)
      get :index
      expect(assigns(:worker_types)).to include(worker_type)
    end
  end

  describe "GET #show" do
    it "assigns the requested worker_type as @worker_type" do
      should_authorize(:show, worker_type)
      get :show, {:id => worker_type.id}
      expect(assigns(:worker_type)).to eq(worker_type)
    end
  end

  describe "GET #new" do
    it "assigns a new worker_type as @worker_type" do
      should_authorize(:new, WorkerType)
      get :new
      expect(assigns(:worker_type)).to be_a_new(WorkerType)
    end
  end

  describe "GET #edit" do
    it "assigns the requested worker_type as @worker_type" do
      should_authorize(:edit, worker_type)
      get :edit, {:id => worker_type.id}
      expect(assigns(:worker_type)).to eq(worker_type)
    end
  end

  describe "POST #create" do
    before :each do
      should_authorize(:create, WorkerType)
    end

    context "with valid params" do
      it "creates a new WorkerType" do
        expect {
          post :create, {:worker_type => valid_attributes}
        }.to change(WorkerType, :count).by(1)
      end

      it "assigns a newly created worker_type as @worker_type" do
        post :create, {:worker_type => valid_attributes}
        expect(assigns(:worker_type)).to be_a(WorkerType)
        expect(assigns(:worker_type)).to be_persisted
      end

      it "redirects to the created worker_type" do
        post :create, {:worker_type => valid_attributes}
        expect(response).to redirect_to(WorkerType.find_by(:name => "OT Valid Name"))
      end
    end
    context "with invalid params" do
      it "assigns a newly created but unsaved worker_type as @worker_type" do
        post :create, {:worker_type => invalid_attributes}
        expect(assigns(:worker_type)).to be_a_new(WorkerType)
      end

      it "re-renders the 'new' template" do
        post :create, {:worker_type => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    before :each do
      should_authorize(:update, worker_type)
    end

    context "with valid params" do
      let(:new_attributes) {
        {
          name: "Worker Type One",
          kind: "Regular",
          code: "WT1"
        }
      }

      it "updates the requested worker_type" do
        put :update, {:id => worker_type.id, :worker_type => new_attributes}
        worker_type.reload
        expect(worker_type.name).to eq("Worker Type One")
      end

      it "assigns the requested worker_type as @worker_type" do
        put :update, {:id => worker_type.id, :worker_type => valid_attributes}
        expect(assigns(:worker_type)).to eq(worker_type)
      end

      it "redirects to the worker_type" do
        put :update, {:id => worker_type.id, :worker_type => valid_attributes}
        expect(response).to redirect_to(worker_type)
      end
    end

    context "with invalid params" do
      it "assigns the worker_type as @worker_type" do
        put :update, {:id => worker_type.id, :worker_type => invalid_attributes}
        expect(assigns(:worker_type)).to eq(worker_type)
      end

      it "re-renders the 'edit' template" do
        put :update, {:id => worker_type.id, :worker_type => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    before :each do
      should_authorize(:destroy, worker_type)
    end

    it "destroys the requested worker_type" do
      expect {
        delete :destroy, {:id => worker_type.id}
      }.to change(WorkerType, :count).by(-1)
    end

    it "redirects to the worker_types list" do
      delete :destroy, {:id => worker_type.id}
      expect(response).to redirect_to(worker_types_url)
    end
  end

end
