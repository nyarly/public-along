require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe LocationsController, type: :controller do

  let!(:location) { FactoryGirl.create(:location) }
  let!(:user) { FactoryGirl.create(:user, :role_name => "Admin") }

  let(:valid_attributes) {
    {
      name: "OT HQ",
      kind: "Office",
      country: "US"
    }
  }

  let(:invalid_attributes) {
    {
      name: "OT HQ",
      kind: "Office",
      country: "CVB"
    }
  }

  before :each do
    login_as user
  end

  describe "GET #index" do
    it "assigns all locations as @locations" do
      should_authorize(:index, Location)
      get :index
      expect(assigns(:locations)).to eq([location])
    end
  end

  describe "GET #show" do
    it "assigns the requested location as @location" do
      should_authorize(:show, location)
      get :show, {:id => location.id}
      expect(assigns(:location)).to eq(location)
    end
  end

  describe "GET #new" do
    it "assigns a new location as @location" do
      should_authorize(:new, Location)
      get :new
      expect(assigns(:location)).to be_a_new(Location)
    end
  end

  describe "GET #edit" do
    it "assigns the requested location as @location" do
      should_authorize(:edit, location)
      get :edit, {:id => location.id}
      expect(assigns(:location)).to eq(location)
    end
  end

  describe "POST #create" do
    before :each do
      should_authorize(:create, Location)
    end

    context "with valid params" do
      it "creates a new Location" do
        expect {
          post :create, {:location => valid_attributes}
        }.to change(Location, :count).by(1)
      end

      it "assigns a newly created location as @location" do
        post :create, {:location => valid_attributes}
        expect(assigns(:location)).to be_a(Location)
        expect(assigns(:location)).to be_persisted
      end

      it "redirects to the created location" do
        post :create, {:location => valid_attributes}
        expect(response).to redirect_to(Location.find_by(:name => "OT HQ"))
      end
    end
    context "with invalid params" do
      it "assigns a newly created but unsaved location as @location" do
        post :create, {:location => invalid_attributes}
        expect(assigns(:location)).to be_a_new(Location)
      end

      it "re-renders the 'new' template" do
        post :create, {:location => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    before :each do
      should_authorize(:update, location)
    end

    context "with valid params" do
      let(:new_attributes) {
        {
          name: "OT San Francisco",
          kind: "Office",
          country: "US"
        }
      }

      it "updates the requested location" do
        put :update, {:id => location.id, :location => new_attributes}
        location.reload
        expect(location.name).to eq("OT San Francisco")
      end

      it "assigns the requested location as @location" do
        put :update, {:id => location.id, :location => valid_attributes}
        expect(assigns(:location)).to eq(location)
      end

      it "redirects to the location" do
        put :update, {:id => location.id, :location => valid_attributes}
        expect(response).to redirect_to(location)
      end
    end

    context "with invalid params" do
      it "assigns the location as @location" do
        put :update, {:id => location.id, :location => invalid_attributes}
        expect(assigns(:location)).to eq(location)
      end

      it "re-renders the 'edit' template" do
        put :update, {:id => location.id, :location => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    before :each do
      should_authorize(:destroy, location)
    end

    it "destroys the requested location" do
      expect {
        delete :destroy, {:id => location.id}
      }.to change(Location, :count).by(-1)
    end

    it "redirects to the locations list" do
      delete :destroy, {:id => location.id}
      expect(response).to redirect_to(locations_url)
    end
  end

end
